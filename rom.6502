ORB = &6000
;ORA = &6001
ORA = &600f
DDRB = &6002
DDRA = &6003
AUX = &600b

LCD_E_BIT = &80
LCD_RS_BIT = &20
LCD_RW_BIT = &40

ORG &8000

.__start

; Configure DDRA
lda #0: sta AUX
;LDA #LCD_E_BIT OR LCD_RS_BIT OR LCD_RW_BIT
lda #$ff ; temporarily put all the things on
sta DDRA
lda #1:sta ORA

; Reset LCD
lda #%00110000: jsr pokeLcdRegNoWait
{ldy#4:.lp dey: bne lp}
lda #%00110000: jsr pokeLcdRegNoWait
{ldy#4:.lp dey: bne lp}
lda #%00110000: jsr pokeLcdRegNoWait
{ldy#4:.lp dey: bne lp}
lda #%00110000: jsr pokeLcdReg ; 8-bit operation, 1-line, 5x8
lda #%00001110: jsr pokeLcdReg ; display & cursor on
lda #%00000110: jsr pokeLcdReg ; autoinc, no shift
;lda #%01001000: jsr pokeLcd ; 'H'
;lda #%01001001: jsr pokeLcd ; 'I'

lda #<message : sta&70
lda #>message : sta&71
ldy #0
.msgloop
lda (&70),y: beq end
jsr pokeLcd
iny:jmp msgloop
.end jmp end

.message EQUS "Hello world": EQUB 0

.pokeLcd ; poke A to lcd data. splat A and X
pha: jsr waitForLcd
pla ; falls through to...
.pokeLcdNoWait ; poke A to lcd data. splats A and X
ldx #$ff:stx DDRB
sta ORB
lda #LCD_E_BIT or LCD_RS_BIT:sta ORA
lda #0:sta ORA
rts

.pokeLcdReg ; poke A to lcd reg. splat A and X
pha: jsr waitForLcd
pla ; falls through to...
.pokeLcdRegNoWait ; poke A to lcd reg. splats A and X
ldx #$ff:stx DDRB
sta ORB
lda #LCD_E_BIT:sta ORA
lda #8:sta ORA
rts

.waitForLcd
; set up for reading from the chip
lda #0:sta DDRB
; assert RW to read
{
  .loop
  lda #2 OR LCD_RW_BIT OR LCD_E_BIT:sta ORA
  lda #2 OR LCD_RW_BIT:sta ORA
  lda ORB
  bmi loop
}
lda #4:sta ORA
rts

SKIPTO &fffc
.fffc EQUW &8000
.fffe EQUW &8000
.__end

SAVE "", __start, __end
